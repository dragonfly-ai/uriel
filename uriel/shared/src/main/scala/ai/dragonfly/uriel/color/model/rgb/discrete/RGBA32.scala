/*
 * Copyright 2023 dragonfly.ai
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package ai.dragonfly.uriel.color.model.rgb.discrete

import ai.dragonfly.uriel.*
import ai.dragonfly.uriel.cie.WorkingSpace
import ai.dragonfly.uriel.color.model.*
import slash.Random

import scala.language.implicitConversions

trait RGBA32 extends DiscreteRGB { self: WorkingSpace =>

  val `1/255`: Double = 1.0 / 255.0

  given Conversion[java.awt.Color, RGBA32] with
    def apply(jac: java.awt.Color): RGBA32 = RGBA32(jac.getRGB() << 24 | jac.getAlpha())

  given Conversion[RGBA32, java.awt.Color] with
    def apply(c: RGBA32): java.awt.Color = new java.awt.Color(c.red, c.green, c.blue, c.alpha)

  object RGBA32 extends UtilRGB32[RGBA32] {

    opaque type RGBA32 = Int

    def apply(rgba: Int): RGBA32 = rgba.asInstanceOf[RGBA32]

    /**
     * Factory method to create a fully opaque RGBA32 instance from separate, specified red, green, blue components and
     * a default alpha value of 255.
     * Parameter values are derived from the least significant byte.  Integer values that range outside of [0-255] may
     * give unexpected results.  For values taken from user input, sensors, or otherwise uncertain sources, consider using
     * the factory method in the Color companion object.
     *
     * @see [[ai.dragonfly.color.ColorVectorSpace.argb]] for a method of constructing RGBA32 objects that validates inputs.
     * @param red   integer value from [0-255] representing the red component in RGB space.
     * @param green integer value from [0-255] representing the green component in RGB space.
     * @param blue  integer value from [0-255] representing the blue component in RGB space.
     * @return an instance of the RGBA32 case class.
     * @example {{{ val c = RGBA32(72,105,183) }}}
     */
    def apply(red: Int, green: Int, blue: Int): RGBA32 = apply(red, green, blue, 255)


    /**
     * Factory method to create an RGBA32 instance from separate, specified red, green, blue, and alpha components.
     * Parameter values are derived from the least significant byte.  Integer values that range outside of [0-255] may
     * give unexpected results.  For values taken from user input, sensors, or otherwise uncertain sources, consider using
     * the factory method in the Color companion object.
     *
     * @see [[ai.dragonfly.color.RGBA32.getIfValid]] for a method of constructing RGBA32 objects with input validation.
     * @param alpha integer value from [0-255] representing the alpha component in RGBA32 space.  Defaults to 255.
     * @param red   integer value from [0-255] representing the red component in RGB space.
     * @param green integer value from [0-255] representing the green component in RGB space.
     * @param blue  integer value from [0-255] representing the blue component in RGB space.
     * @return an instance of the RGBA32 case class.
     * @example {{{ val c = RGBA32(72,105,183) }}}
     */
    def apply(red: Int, green: Int, blue: Int, alpha: Int): RGBA32 = apply((red << 24) | (green << 16) | (blue << 8) | alpha)

    inline def clamp(red: Double, green: Double, blue: Double): Int = clamp(red, green, blue, MAX)

    /**
     * Factory method to create a fully Opaque RGBA32 color; one with an alpha value of 255.
     * Because this method validates each intensity, it sacrifices performance
     * for safety.  Although well suited for parsing color data generated by sensors or user input, this method undercuts
     * performance in applications like reading image data.
     *
     * To skip validation and minimize overhead, @see [[ai.dragonfly.color.RGBA32.apply]]
     *
     * @param red   integer value from [0-255] representing the red component in RGB space.
     * @param green integer value from [0-255] representing the green component in RGB space.
     * @param blue  integer value from [0-255] representing the blue component in RGB space.
     * @return an instance of the RGBA32 class or None if fed invalid input.
     */
    def getIfValid(red: Int, green: Int, blue: Int): Option[RGBA32] = getIfValid(255, red, green, blue)

    /**
     * Factory method to create an RGBA32 color.  Because this method validates each intensity, it sacrifices performance
     * for safety.  Although well suited for parsing color data generated by sensors or user input, this method undercuts
     * performance in applications like reading image data.
     *
     * To skip validation and minimize overhead, @see [[ai.dragonfly.color.RGBA32.apply]]
     *
     * @param alpha integer value from [0-255] representing the alpha component in RGBA32 space.
     * @param red   integer value from [0-255] representing the red component in RGB space.
     * @param green integer value from [0-255] representing the green component in RGB space.
     * @param blue  integer value from [0-255] representing the blue component in RGB space.
     * @return an instance of the C class or None if fed invalid input.
     */
    def getIfValid(red: Int, green: Int, blue: Int, alpha: Int): Option[RGBA32] = {
      if (valid(red, green, blue, alpha)) Some(apply(red, green, blue, alpha))
      else None
    }

    override def weightedAverage(c1: RGBA32, w1: Double, c2: RGBA32, w2: Double): RGBA32 = RGBA32(
      ((c1.red * w1) + (c2.red * w2)).toInt,
      ((c1.green * w1) + (c2.green * w2)).toInt,
      ((c1.blue * w1) + (c2.blue * w2)).toInt,
      ((c1.alpha * w1) + (c2.alpha * w2)).toInt
    )

    override def fromXYZ(xyz: XYZ): RGBA32 = fromRGB(xyz.toRGB)

    override def fromRGB(rgb: RGB): RGBA32 = apply(clamp(rgb.red * MAX, rgb.green * MAX, rgb.blue * MAX))

    /**
     * Generate an RGBA32 instance from a single value.  This method validates the intensity parameter at some cost to performance.
     *
     * @param intensity the intensity of the desired gray value ranging from [0-255].
     * @return an RGBA32 instance encoding the desired grayscale intensity.
     */
    def grayIfValid(intensity: Int): Option[RGBA32] = {
      if (valid0to1(intensity)) Some(apply(intensity, intensity, intensity))
      else None
    }

    /**
     * Use Color.random() to obtain a random color in the form of an RGBA32 instance.
     * This method executes quickly and without memory costs, but the RGB color space biases toward cool colors.
     * In contrast, the Color.randomFromLabSpace() method takes seconds to initialize and has a memory footprint of several megabytes
     * However, it samples from a perceptually uniform color space and avoids the bias toward cool colors.
     * This method samples the Red, Green, and Blue color components uniformly, but always returns 255 for the alpha component.
     *
     * @return a randomly generated color sampled from the RGB Color ColorSpace.
     */
    override def random(r: scala.util.Random = Random.defaultRandom): RGBA32 = (r.nextInt(0xFFFFFF) << 8 ) | 0xFF

    /**
     * @return the red component of this color in RGBA32 space.
     */
    inline def red(rgba:RGBA32): Int = rgba >> 24 & 0xff

    /**
     * @return the green component of this color in RGBA32 space.
     */
    inline def green(rgba:RGBA32): Int = rgba >> 16 & 0xff

    /**
     * @return the blue component of this color in RGBA32 space.
     */
    inline def blue(rgba:RGBA32): Int = rgba >> 8 & 0xff

    /**
     * @return the alpha component of this color in RGBA32 space.
     */
    inline def alpha(rgba:RGBA32): Int = rgba & 0xff


    /**
     * @return a hexadecimal string representing the rgba integer for this color.
     * @example {{{
     * val c = RGBA(72,105,183)
     * c.hex() // returns "ff4869b7"
     * }}}
     */
    inline def hex(rgba:RGBA32): String = Integer.toHexString(rgba)

    /**
     * @return a string representing the color in an html friendly way.
     * @example {{{
     * val c = RGBA(72,105,183)
     * c.html() // returns "#4869b7"
     * }}}
     */
    inline def html(rgba:RGBA32): String = "#" + Integer.toHexString(rgba | 0xff000000).substring(2)

    override def toRGB(c: RGBA32): RGB = c.toRGB

    override def toXYZ(c: RGBA32): XYZ = c.toXYZ
  }

  type RGBA32 = RGBA32.RGBA32

  /**
   * RGBA32 is the primary type for representing colors in RGBA32 space.
   *
   * @constructor Create a new RGBA32 object from an Int.
   * @see [[https://en.wikipedia.org/wiki/RGB_color_space]] for more information on the RGB color space.
   * @param rgba a 32 bit integer that represents this color in RGBA32 space.
   *             The most significant byte encodes the alpha value, the second most significant byte encodes red,
   *             the third most significant byte encodes green, and the least significant byte encodes blue.
   * @return an instance of the RGBA32 case class.
   * @example {{{
   * val c = RGBA32(-1)  // returns fully opaque white
   * c.toString()  // returns "RGBA32(255,255,255,255)"
   * RGBA32(0xFF0000FF).toString() // returns "RGBA32(255,0,0,255)"
   * }}}
   */

  given DiscreteRGB[RGBA32] with {
    extension (rgba: RGBA32) {
      /**
       * @return the red component of this color in RGBA32 space.
       */
      inline def red: Int = RGBA32.red(rgba)

      /**
       * @return the green component of this color in RGBA32 space.
       */
      inline def green: Int = RGBA32.green(rgba)

      /**
       * @return the blue component of this color in RGBA32 space.
       */
      inline def blue: Int = RGBA32.blue(rgba)

      /**
       * @return the alpha component of this color in RGBA32 space.
       */
      inline def alpha: Int = RGBA32.alpha(rgba)

      override def toRGB: RGB = RGB(`1/255` * red, `1/255` * green, `1/255` * blue)

      override def similarity(that: RGBA32): Double = RGBA32.similarity(rgba, that)

//      /**
//       * @return the hashcode.  For all color types, the hashcode function returns the same result as rgba
//       */
//      override def hashCode(): Int = rgba.asInstanceOf[Int]
//
//      /**
//       * @return true if these colors are equal in RGBA space, false otherwise
//       */
//      def equals(obj: Any): Boolean = obj match {
//        case that: RGBA32 => rgba == that
//        case _ => false
//      }

      /**
       * @return a hexadecimal string representing the rgba integer for this color.
       * @example {{{
       * val c = RGBA(72,105,183)
       * c.hex() // returns "ff4869b7"
       * }}}
       */
      inline def hex: String = RGBA32.hex(rgba)

      /**
       * @return a string representing the color in an html friendly way.
       * @example {{{
       * val c = RGBA(72,105,183)
       * c.html() // returns "#4869b7"
       * }}}
       */
      inline def html: String = RGBA32.html(rgba)

      /**
       * @return a string representing the color in an SVG friendly way.
       * @example {{{
       * val c = RGBA(72,105,183)
       * c.svg() // returns "rgb(72,105,183)"
       * }}}
       *
       * if the color has an alpha value less than 255, in other words, if the color has any measure of translucency,
       * this method returns an rgba svg string instead of an rgb string.
       * @example {{{
       * val c = RGBA(72,105,183, 128)
       * c.svg() // returns "rgba(72,105,183,0.501960813999176)"
       * }}}
       */
      def svg: String = {
        if (alpha < 255) s"rgba($red, $green, $blue, ${alpha / 255f})"
        else s"rgb($red, $green, $blue)"
      }

      /**
       * @return a string representing the color in a CSS friendly way.
       * @example {{{
       * val c = RGBA(72,105,183)
       * c.css() // returns "rgb(72,105,183)"
       * }}}
       *
       * if the color has an alpha value less than 255, in other words, if the color has any measure of translucency,
       * this method returns an rgba svg string instead of an rgb string.
       * @example {{{
       * val c = RGBA(72,105,183, 128)
       * c.svg() // returns "rgba(72,105,183,0.501960813999176)"
       * }}}
       */
      inline def css: String = svg

      override def render: String = s"RGBA32($red, $green, $blue, $alpha)"

      override def toXYZ: XYZ = toRGB.toXYZ

      override def copy: RGBA32 = {
        val i: Int = rgba.asInstanceOf[Int]
        i.asInstanceOf[RGBA32]
      }
    }
  }
}

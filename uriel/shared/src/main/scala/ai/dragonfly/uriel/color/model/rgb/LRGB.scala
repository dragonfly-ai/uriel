/*
 * Copyright 2023 dragonfly.ai
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package ai.dragonfly.uriel.color.model.rgb

import ai.dragonfly.mesh.*
import ai.dragonfly.mesh.shape.*
import ai.dragonfly.uriel.*
import ai.dragonfly.uriel.cie.*
import narr.*
import slash.Random
import slash.vector.*
import slash.matrix.*

import scala.language.implicitConversions

trait LRGB { self: WorkingSpace =>

  object LRGB extends VectorSpace[LRGB] {

    opaque type LRGB = Vec[3]

    override lazy val usableGamut: Gamut = new Gamut( Cube(1.0, 32) )

    override val maxDistanceSquared: Double = 3.0

    def apply(values: NArray[Double]): LRGB = dimensionCheck(values, 3).asInstanceOf[LRGB]

    /**
     * Factory method to create a fully opaque RGB instance from separate, specified red, green, blue components and
     * a default alpha value of 1.0.
     * Double values that range outside of [0.0-1.0] may give unexpected results.  For values taken from user input, sensors,
     * or otherwise uncertain sources, consider using the factory method in the Color companion object.
     *
     * @see [[ai.dragonfly.color.ColorVectorSpace.RGB]] for a method of constructing RGB objects that validates inputs.
     * @param red   decimal value from [0.0-1.0] representing the red component in RGB space.
     * @param green decimal value from [0.0-1.0] representing the green component in RGB space.
     * @param blue  decimal value from [0.0-1.0] representing the blue component in RGB space.
     * @return an instance of the RGB case class.
     * @example {{{ val c = RGB(72,105,183) }}}
     */
    def apply(red: Double, green: Double, blue: Double): LRGB = apply(NArray[Double](red, green, blue))

    /**
     * Factory method to create a fully Opaque RGB color; one with an alpha value of 1.0.
     * Because this method validates each intensity, it sacrifices performance for safety.
     * Although well suited for parsing color data generated by sensors or user input, this method undercuts
     * performance in applications like reading image data.
     *
     * To skip validation and minimize overhead, @see [[ai.dragonfly.color.RGB.apply]]
     *
     * @param red   decimal value from [0.0-1.0] representing the red component in RGB space.
     * @param green decimal value from [0.0-1.0] representing the green component in RGB space.
     * @param blue  decimal value from [0.0-1.0] representing the blue component in RGB space.
     * @return an instance of the RGB class or None if fed invalid input.
     */

    def getIfValid(red: Double, green: Double, blue: Double): Option[LRGB] = {
      if (valid0to1(red, green, blue)) Some(apply(red, green, blue))
      else None
    }

    /**
     * Use Color.random() to obtain a random color in the form of an RGB instance.
     * This method executes quickly and without memory costs, but the RGB color space biases toward cool colors.
     * In contrast, the Color.randomFromLabSpace() method takes seconds to initialize and has a memory footprint of several megabytes
     * However, it samples from a perceptually uniform color space and avoids the bias toward cool colors.
     * This method samples the Red, Green, and Blue color components uniformly, but always returns 1.0 for the alpha component.
     *
     * @return a randomly generated color sampled from the RGB Color ColorSpace.
     */
    override def random(r: scala.util.Random = Random.defaultRandom): LRGB = Vec[3](r.nextDouble(), r.nextDouble(), r.nextDouble())

    def red(lrgb:LRGB):Double = lrgb(0)
    def green(lrgb:LRGB):Double = lrgb(1)
    def blue(lrgb:LRGB):Double = lrgb(2)

    override def euclideanDistanceSquaredTo(c1: LRGB, c2: LRGB): Double = c1.euclideanDistanceSquaredTo(c2)

    override def fromVec(v: Vec[3]): LRGB = v

    override def toVec(lrgb: LRGB): Vec[3] = lrgb.asInstanceOf[Vec[3]].copy

    override def toRGB(lrgb: LRGB): RGB = RGB(
      transferFunction.encode(lrgb.red),
      transferFunction.encode(lrgb.green),
      transferFunction.encode(lrgb.blue),
    )
    override def fromRGB(rgb: RGB): LRGB = LRGB(
      transferFunction.decode(rgb.red),
      transferFunction.decode(rgb.green),
      transferFunction.decode(rgb.blue)
    )

    override def toXYZ(lrgb: LRGB): XYZ = (M * Mat[3, 1]( lrgb.red, lrgb.green, lrgb.blue )).values.asInstanceOf[XYZ]
    override def fromXYZ(xyz:XYZ):LRGB = LRGB((M_inverse * xyz.vec.asColumnMatrix).values)

    override def toString:String = "LRGB"
  }

  type LRGB = LRGB.LRGB

  given VectorColorModel[LRGB] with {
    extension (lrgb: LRGB) {

      def red: Double = LRGB.red(lrgb)

      def green: Double = LRGB.green(lrgb)

      def blue: Double = LRGB.blue(lrgb)

      override def render: String = s"LRGB($red, $green, $blue)"

      def copy: LRGB = LRGB(red, green, blue)

      override def toXYZ: XYZ = LRGB.toXYZ(lrgb)

      override def similarity(that: LRGB): Double = LRGB.similarity(lrgb, that)

      override def toRGB: RGB = LRGB.toRGB(lrgb)
    }

  }
}
